name: Build MediaPipe LLM Inference Engine

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Bazel
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD', '**/WORKSPACE', '**/*.bzl') }}
        restore-keys: |
          ${{ runner.os }}-bazel-
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build in Docker container
      run: |
        # 创建输出目录（在宿主机上）
        mkdir -p ${{ github.workspace }}/build_output
        
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -v ~/.cache/bazel:/root/.cache/bazel \
          -v ~/.cache/bazelisk:/root/.cache/bazelisk \
          -e USER=ubuntu \
          -e HOME=/home/ubuntu/mediapipe \
          --user root \
          kejod15117/mediapipe:base \
          bash -c "
            # 设置环境变量
            export USER=ubuntu
            export HOME=/home/ubuntu/mediapipe
            
            # 检查 MediaPipe 目录
            echo 'Checking MediaPipe installation...'
            if [ -d \"\$HOME\" ]; then
              echo 'Found MediaPipe at: '\$HOME
              cd \$HOME
              
              # 如果需要，同步当前仓库的更改
              if [ -d /workspace/.git ]; then
                echo 'Syncing repository changes...'
                # 复制当前仓库的特定文件（如果需要）
                # cp -r /workspace/* . 2>/dev/null || true
              fi
            elif [ -f /workspace/WORKSPACE ]; then
              echo 'Using workspace directory'
              cd /workspace
            else
              echo 'ERROR: MediaPipe directory not found'
              echo 'Checking available directories:'
              ls -la /home/ || true
              ls -la /home/ubuntu/ || true
              exit 1
            fi
            
            # 显示当前目录信息
            echo 'Current directory:' \$(pwd)
            echo 'WORKSPACE file check:'
            ls -la WORKSPACE || echo 'WORKSPACE file not found!'
            
            # 执行构建命令
            echo 'Starting build...'
            bazel build \
              --client_env=CC=clang-16 \
              --cxxopt=-DABSL_FLAGS_STRIP_NAMES=0 \
              -c opt \
              --config=android_arm64 \
              --define=xnn_enable_arm_i8mm=true \
              mediapipe/tasks/cc/genai/inference/c:llm_inference_engine_cpu_main
            
            # 查找并复制构建产物
            echo '=== Finding build artifacts ==='
            
            # 查找主要的可执行文件
            find bazel-out -name 'llm_inference_engine_cpu_main' -type f 2>/dev/null | while read file; do
              echo \"Found: \$file\"
              cp \"\$file\" /workspace/build_output/
            done
            
            # 查找相关的库文件
            find bazel-bin -path '*mediapipe/tasks/cc/genai/inference/c*' KATEX_INLINE_OPEN -name '*.so' -o -name '*.a' KATEX_INLINE_CLOSE 2>/dev/null | while read file; do
              echo \"Found library: \$file\"
              cp \"\$file\" /workspace/build_output/
            done || true
            
            # 也检查 bazel-bin 下的可执行文件
            find bazel-bin -path '*mediapipe/tasks/cc/genai/inference/c*' -name 'llm_inference_engine_cpu_main' -type f 2>/dev/null | while read file; do
              echo \"Found binary: \$file\"
              cp \"\$file\" /workspace/build_output/
            done || true
            
            # 列出构建产物
            echo '=== Build artifacts in output directory ==='
            ls -la /workspace/build_output/
            
            # 如果没有找到产物，显示更多调试信息
            if [ -z \"\$(ls -A /workspace/build_output/)\" ]; then
              echo 'WARNING: No artifacts copied. Checking bazel output structure:'
              echo '--- bazel-out directory ---'
              find bazel-out -type f -name '*llm_inference*' | head -20
              echo '--- bazel-bin directory ---'
              find bazel-bin -type f -path '*genai/inference*' | head -20
            fi
          "
    
    - name: Check build output
      run: |
        if [ -z "$(ls -A build_output 2>/dev/null)" ]; then
          echo "ERROR: No build artifacts found!"
          echo "This might indicate a build failure or incorrect output path."
          exit 1
        fi
        echo 
