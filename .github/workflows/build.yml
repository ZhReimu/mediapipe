name: Build MediaPipe LLM Inference Engine

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Bazel
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD', '**/WORKSPACE', '**/*.bzl') }}
        restore-keys: |
          ${{ runner.os }}-bazel-
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build in Docker container
      run: |
        # 创建输出目录（在宿主机上）
        mkdir -p ${{ github.workspace }}/build_output
        
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -v ~/.cache/bazel:/root/.cache/bazel \
          -v ~/.cache/bazelisk:/root/.cache/bazelisk \
          -e USER=root \
          -e HOME=/home/root/mediapipe \
          --user root \
          kejod15117/mediapipe:base \
          bash -c "
            # 设置环境变量
            export USER=root
            export HOME=/home/\$USER/mediapipe
            
            # 检查是否存在 MediaPipe workspace
            if [ -f /workspace/WORKSPACE ]; then
              echo 'Found WORKSPACE file in /workspace'
              cd /workspace
            elif [ -f \$HOME/WORKSPACE ]; then
              echo 'Found WORKSPACE file in \$HOME'
              cd \$HOME
              # 如果代码在容器的 HOME 目录，复制当前仓库的文件
              cp -r /workspace/* . 2>/dev/null || true
            else
              echo 'ERROR: No WORKSPACE file found'
              echo 'Checking directory structure...'
              ls -la /workspace/
              ls -la \$HOME/ || echo 'HOME directory not accessible'
              exit 1
            fi
            
            # 显示当前目录
            echo 'Current directory:' \$(pwd)
            echo 'Directory contents:'
            ls -la
            
            # 执行构建命令
            bazel build \
              --client_env=CC=clang-16 \
              --cxxopt=-DABSL_FLAGS_STRIP_NAMES=0 \
              -c opt \
              --config=android_arm64 \
              --define=xnn_enable_arm_i8mm=true \
              mediapipe/tasks/cc/genai/inference/c:llm_inference_engine_cpu_main
            
            # 查找并复制构建产物
            echo '=== Finding build artifacts ==='
            
            # 查找主要的可执行文件
            find bazel-out -name 'llm_inference_engine_cpu_main' -type f | while read file; do
              echo \"Found: \$file\"
              cp \"\$file\" /workspace/build_output/
            done
            
            # 查找相关的库文件
            find bazel-bin -path '*mediapipe/tasks/cc/genai/inference/c*' KATEX_INLINE_OPEN -name '*.so' -o -name '*.a' KATEX_INLINE_CLOSE 2>/dev/null | while read file; do
              echo \"Found library: \$file\"
              cp \"\$file\" /workspace/build_output/
            done || true
            
            # 如果在 HOME 目录构建，也要检查那里的输出
            if [ \"\$(pwd)\" != \"/workspace\" ]; then
              find ./bazel-out -name 'llm_inference_engine_cpu_main' -type f -exec cp {} /workspace/build_output/ \; 2>/dev/null || true
              find ./bazel-bin -path '*mediapipe/tasks/cc/genai/inference/c*' KATEX_INLINE_OPEN -name '*.so' -o -name '*.a' KATEX_INLINE_CLOSE -exec cp {} /workspace/build_output/ \; 2>/dev/null || true
            fi
            
            # 列出构建产物
            echo '=== Build artifacts in output directory ==='
            ls -la /workspace/build_output/
          "
    
    - name: Check build output
      run: |
        if [ -z "$(ls -A build_output)" ]; then
          echo "ERROR: No build artifacts found!"
          echo "This might indicate a build failure or incorrect output path."
          exit 1
        fi
        echo "Build artifacts found:"
        ls -la build_output/
    
    - name: Create artifact archive
      run: |
        cd build_output
        tar -czf ../llm_inference_engine_android_arm64.tar.gz *
        cd ..
        echo "Archive created: llm_inference_engine_android_arm64.tar.gz"
        ls -lh llm_inference_engine_android_arm64.tar.gz
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: llm-inference-engine-android-arm64
        path: |
          llm_inference_engine_android_arm64.tar.gz
          build_output/
        retention-days: 30
    
    - name: Generate build info
      run: |
        echo "# Build Information" > build_info.txt
        echo "Build Date: $(date)" >> build_info.txt
        echo "Git Commit: ${{ github.sha }}" >> build_info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> build_info.txt
        echo "" >> build_info.txt
        echo "## Build Command:" >> build_info.txt
        echo '```' >> build_info.txt
        echo "bazel build --client_env=CC=clang-16 --cxxopt=-DABSL_FLAGS_STRIP_NAMES=0 -c opt --config=android_arm64 --define=xnn_enable_arm_i8mm=true mediapipe/tasks/cc/genai/inference/c:llm_inference_engine_cpu_main" >> build_info.txt
        echo '```' >> build_info.txt
        echo "" >> build_info.txt
        echo "## Build Artifacts:" >> build_info.txt
        ls -la build_output/ >> build_info.txt || echo "No artifacts found" >> build_info.txt
    
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build_info.txt
        retention-days: 30
